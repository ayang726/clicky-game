{"version":3,"sources":["components/Card/Card.jsx","components/Column/Column.jsx","components/Row/Row.jsx","components/Body/Body.jsx","components/Jumbotron/Jumbotron.jsx","components/Navbar/Navbar.jsx","components/Footer/Footer.jsx","App.js","serviceWorker.js","index.js"],"names":["Card_Card","props","imgSrc","concat","cardName","react_default","a","createElement","className","onClick","cardClick","src","alt","name","Column","Row","cardNames","map","index","key","Body_Body","cardNameArray","push","length","propsValue","Jumbotron_Jumbotron","Navbar","id","message","score","topScore","Footer_Footer","App","state","selected","e","console","log","target","_this","includes","setState","incrementScore","storeSelected","sort","Math","random","newArray","components_Navbar_Navbar","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.21c935dc.chunk.js","sourcesContent":["import React from \"react\"\nimport \"./Card.css\"\n\nexport default function (props) {\n\n    const imgSrc = `./assets/images/${props.cardName}.png`\n    return (\n        <div className=\"card\" onClick={props.cardClick} >\n            <img className=\"card-content\" src={imgSrc} alt=\"...\" name={props.cardName} />\n        </div>\n    )\n}","import React from \"react\"\nimport Card from \"../Card/Card\"\n\nexport default function (props) {\n    return (\n        <div className=\"col-lg-3 col-md-4 col-sm-6\">\n            <Card cardName={props.cardName} cardClick={props.cardClick} />\n        </div>\n    )\n}","import React from \"react\"\nimport Column from \"../Column/Column\"\n\nexport default function (props) {\n\n    return (\n        <div className=\"row my-4\">\n            {\n                props.cardNames.map((cardName, index) => {\n                    return <Column cardName={cardName} cardClick={props.cardClick} key={index} />\n                })\n            }\n        </div>\n    )\n}","import React from \"react\"\nimport \"./Body.css\"\nimport Row from \"../Row/Row\"\n\nexport default function (props) {\n    let cardNames = [];\n    return (\n        <div className=\"container my-4 mx-auto\">\n            {props.cardNameArray.map((cardName, index) => {\n                cardNames.push(cardName)\n\n                if ((index + 1) % 4 === 0 || (index + 1) === props.cardNameArray.length) {\n                    const propsValue = cardNames;\n                    cardNames = [];\n                    return <Row cardNames={propsValue} key={index} cardClick={props.cardClick} />\n                }\n                else return null;\n\n            })}\n        </div>\n    );\n}","import React from \"react\";\nimport \"./Jumbotron.css\"\n\nexport default function (props) {\n    return (\n        <div className=\"text-center jumbotron\">\n            <h1 className=\"m-4 display-2\"><strong>Clicky Game!</strong></h1>\n            <h4><strong>Click on an image to earn points, but don't click on any more than once!</strong></h4>\n        </div>\n    )\n}","import React from \"react\"\nimport \"./Navbar.css\"\n\nfunction Navbar(props) {\n    return (\n        <div>\n            <nav className=\"navbar navbar-expand-lg navbar-light\">\n                <div className=\"d-flex flex-row mx-auto\">\n                    <ul>\n                        <li className=\"brand\">\n                            <strong>Clicky Game</strong>\n                        </li>\n                        <li className=\"message\" id=\"message\">\n                            {props.message || \"Click an image to begin!\"}\n                        </li>\n                        <li className=\"score\">\n                            Score: {props.score || 0} | Top Score: {props.topScore || 0}\n                        </li>\n                    </ul>\n                </div>\n            </nav>\n        </div>\n    );\n}\n\nexport default Navbar;","import React from \"react\"\nimport \"./Footer.css\"\n\nexport default function () {\n    return (\n        <div>\n            <div className=\"footer-light\"></div>\n            <div className=\"footer-dark\">\n                <strong>Clicky Game! React</strong>\n            </div>\n        </div>\n    );\n}","import React, { Component } from 'react';\nimport './App.css';\nimport { Body, Jumbotron, Navbar, Footer } from \"./components\"\n// import Navbar from \"./components/Navbar\"\n\nclass App extends Component {\n  state = {\n    cardNameArray: [\"beth\", \"birdperson\", \"evilmorty\", \"gianthead\", \"goldenford\",\n      \"jerry\", \"jessica\", \"meeseeks\", \"morty\", \"mr\", \"rick\", \"summer\"],\n    score: 0,\n    topScore: 0,\n    selected: [],\n    message: \"Click an image to begin!\"\n  }\n\n  cardClick = (e) => {\n    console.log(e.target.name);\n    if (this.state.selected.includes(e.target.name)) {\n      // restart game\n      this.setState({ score: 0, selected:[], message:\"You have clicked this already, try again!\" })\n    } else {\n      // increment score\n      this.incrementScore();\n      this.storeSelected(e);\n    }\n    // reshuffle pictures\n    this.setState({\n      cardNameArray: this.state.cardNameArray.sort(\n        () => { return (Math.random() * 2 - 1) }\n      )\n    })\n  }\n  incrementScore = () => {\n    if (this.state.topScore <= this.state.score) {\n      this.setState({ topScore: this.state.topScore + 1 })\n    }\n    this.setState({ score: this.state.score + 1, message:\"You got this one right!\" });\n\n  }\n  storeSelected = (e) => {\n    const newArray = this.state.selected\n    newArray.push(e.target.name)\n    this.setState({ selected: newArray })\n  }\n  render() {\n    return (\n      <div>\n        <Navbar score={this.state.score} topScore={this.state.topScore} message={this.state.message}/>\n        <Jumbotron />\n        <Body cardNameArray={this.state.cardNameArray} cardClick={this.cardClick} />\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}